import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from docx import Document
import time

# Ruta al archivo Excel de entrada
input_file = r"D:\OneDrive - M. TORRES DISEÑOS INDUSTRIALES S.A.U\Escritorio\Nueva carpeta\EMPRESAS PARTICIPANTES SUPERCORR24reducida.xlsx"
# Configuración de EdgeDriver
edge_driver_path = r"D:\OneDrive - M. TORRES DISEÑOS INDUSTRIALES S.A.U\Escritorio\Nueva carpeta\Edge Driver\msedgedriver.exe"
edge_service = EdgeService(executable_path=edge_driver_path)
edge_options = webdriver.EdgeOptions()
edge_options.add_argument('--start-maximized')
driver = webdriver.Edge(service=edge_service, options=edge_options)

# Leer nombres de clientes desde la Hoja1, columna A
df_clients = pd.read_excel(input_file, sheet_name="Hoja1", usecols=[0], names=["Client"])

# Crear carpeta para guardar los archivos Word
output_folder = "Client_Info_Word"
os.makedirs(output_folder, exist_ok=True)

# Temas de búsqueda específicos para cada cliente
search_topics = [ "company name"
    "Industry",
    "headquarters location",
    "main production plant",
    "number of employees",
    "main products by revenue",
    "company strategy",
    "customer objectives",
    "customer demands to equipment OEMs",
    "planned investments",
    "financial report",
    "financial situation revenue profits growth",
    "latest news"
]

# Realizar la búsqueda y almacenar la información en archivos Word
for idx, row in df_clients.iterrows():
    client = row['Client']
    print(f"Recopilando información para: {client}")
    client_data = {
 "Industry": {},
    "headquarters location": {},
    "main production plant": {},
    "number of employees": {},
    "main products by revenue": {},
    "company strategy": {},
    "customer objectives": {},
    "customer demands to equipment OEMs": {},
    "planned investments": {},
    "financial report": {},
    "financial situation revenue profits growth": {},
    "latest news": {}
            }
    for topic in search_topics:
        driver.get("https://www.google.com")
        search_query = f"{client} {topic}"
        
        try:
            # Esperar que aparezca la caja de búsqueda y realizar la búsqueda
            search_box = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.NAME, "q"))
            )
            search_box.clear()
            search_box.send_keys(search_query)
            search_box.send_keys(Keys.RETURN)
            
            # Esperar a que los resultados se carguen y tomar los resultados relevantes
            WebDriverWait(driver, 10).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "div.g"))
            )
            results = driver.find_elements(By.CSS_SELECTOR, "div.g")
            
            # Extraer los primeros 10 resultados de texto para cada tema
            topic_info = []
            for result in results[:10]:
                try:
                    title = result.find_element(By.TAG_NAME, "h3").text
                    snippet = result.find_element(By.CSS_SELECTOR, ".VwiC3b").text
                    if title and snippet:
                        topic_info.append(f"{title}\n{snippet}")
                except Exception as e:
                    print(f"Error al extraer información de un resultado: {e}")
            
            # Almacenar la información por tema en el diccionario
            combined_info = " ".join(topic_info) if topic_info else "No se encontró información"
            if topic == "packaging industry overview":
                client_data["Información General del Cliente"]["Sector y Mercado"] = combined_info
            elif topic == "headquarters location":
                client_data["Datos de Contacto"]["Ubicación de la Sede"] = combined_info
            elif topic == "number of employees":
                client_data["Datos Financieros y de Rendimiento"]["Número de Empleados"] = combined_info
            elif topic == "main products by revenue":
                client_data["Productos y Servicios Actuales"]["Productos Principales"] = combined_info
            elif topic == "company strategy":
                client_data["Información General del Cliente"]["Historia y Visión"] = combined_info
            elif topic == "customer objectives":
                client_data["Análisis de Necesidades y Objetivos"]["Objetivos Comerciales"] = combined_info
            elif topic == "customer demands to equipment OEMs":
                client_data["Análisis de Necesidades y Objetivos"]["Necesidades Específicas"] = combined_info
            elif topic == "planned investments":
                client_data["Oportunidades de Mejora y Propuestas"]["Inversiones Planeadas"] = combined_info
            elif topic == "financial report":
                client_data["Datos Financieros y de Rendimiento"]["Reporte Financiero"] = combined_info
            elif topic == "financial situation revenue profits growth":
                client_data["Datos Financieros y de Rendimiento"]["Situación Financiera"] = combined_info
            elif topic == "latest news":
                client_data["Conclusiones y Recomendaciones"]["Últimas Noticias"] = combined_info
        except Exception as e:
            print(f"Error al buscar '{topic}' para {client}: {e}")

    # Guardar la información en un archivo Word
    doc = Document()
    doc.add_heading(f'Informe del Cliente: {client}', 0)
    
    for section, details in client_data.items():
        doc.add_heading(section, level=1)
        for key, value in details.items():
            doc.add_paragraph(f"{key}: {value}")
        doc.add_paragraph()  # Línea en blanco para separar secciones

    # Ruta para guardar el archivo
    word_file_path = os.path.join(output_folder, f"{client.replace(' ', '_')}.docx")
    doc.save(word_file_path)
    
    time.sleep(2)

# Cerrar el navegador
driver.quit()
print(f"Todos los archivos Word han sido guardados en la carpeta '{output_folder}'.")
